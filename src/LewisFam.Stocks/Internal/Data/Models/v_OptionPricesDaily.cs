// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using LewisFam.Stocks.Models.Enums;


namespace LewisFam.Stocks.Data.Models
{
    public partial class v_OptionPricesDaily 
    {
        public long TickerId { get; set; }

        [StringLength(20)]
        public string UnSymbol { get; set; }
        
        public double? StrikePrice { get; set; }

        [Column(TypeName = "date"), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? ExpireDate { get; set; }
        public DirectionType? Direction { get; set; }

        [StringLength(4), Column(TypeName = "nvarchar(4)")]
        public CallPut? Slide { get; set; }
        public long? OpenInterest { get; set; }
        public long? OpenIntChange { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double Change { get; set; }

        [DisplayFormat(DataFormatString = "{0:P}", ApplyFormatInEditMode = true)]
        public double ChangeRatio { get; set; }
        [Column(TypeName = "date"), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? UpdatedOnDate { get; set; }
        public long? Volume { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? SpotPrice { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? PreClose { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? Open { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? Low { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? High { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? Close { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? MidPrice { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? AskPrice { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? BidPrice { get; set; }

        public long? AskVolume { get; set; }
        public long? BidVolume { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? OpenClose_Range { get; set; }

        [DisplayFormat(DataFormatString = "{0:C}", ApplyFormatInEditMode = true)]
        public double? HighLow_Range { get; set; }
        public double? ImpVol { get; set; }
        public double Delta { get; set; }
        public double Gamma { get; set; }
        public double Rho { get; set; }
        public double Theta { get; set; }
        public double Vega { get; set; }
        public double? Weekly { get; set; }

        public long? ActiveLevel { get; set; }

        public virtual double BreakEven { get; set; }
        public virtual double IntrinsicValue { get; set; }

        public virtual double ExtrinsicValue { get; set; }

        public virtual double PercDiffBetweenSpotPriceAndBreakEven { get; set; }

        public virtual double PercDiffBetweenBreakEvenAndSpotPrice { get; set; }

        [NotMapped]
        public string Symbol => UnSymbol; 
    }
}