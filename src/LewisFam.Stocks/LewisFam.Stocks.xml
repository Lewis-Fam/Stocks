<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LewisFam.Stocks</name>
    </assembly>
    <members>
        <member name="M:LewisFam.Stocks.Internal.Models.BaseDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LewisFam.Stocks.Internal.Models.BaseDataService"/> class.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.Internal.Models.BaseDataService.Client">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.Internal.Models.BaseDataService.Uri">
            <summary>
            Gets or sets the uri.
            </summary>
        </member>
        <member name="M:LewisFam.Stocks.Internal.Models.BaseDataService.Dispose(System.Boolean)">
            <inheritdoc cref="M:LewisFam.Stocks.Internal.Models.BaseDataService.Dispose"/>
        </member>
        <member name="M:LewisFam.Stocks.Internal.Models.BaseDataService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LewisFam.Stocks.Internal.Models.BaseOption">
            <summary>
            The base stock option.
            </summary>
        </member>
        <member name="M:LewisFam.Stocks.Internal.Models.BaseOption.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LewisFam.Stocks.Models.Enums.DirectionType">
            <summary>
            DirectionType
            </summary>
            <remarks>DirectionType will be removed. Use <see cref="!:DirectionSlide"/></remarks>            
        </member>
        <member name="T:LewisFam.Stocks.Models.Enums.OptionStrategy">
            <summary>The option strategy.</summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.Call">
            <summary>
            Call options are financial contracts that give the option buyer the right, but not the obligation, to buy a stock, bond, commodity or other asset or instrument at
            a specified price within a specific time period. The stock, bond, or commodity is called the underlying asset. A call buyer profits when the underlying asset
            increases in price.
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.Put">
            <summary>
            A put option is a contract giving the owner the right, but not the obligation, to sell or sell short a specified amount of an underlying security at a
            pre-determined price within a specified time frame. This pre-determined price that buyer of the put option can sell at is called the strike price.
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.DebitSpread">
            <summary>
            A debit spread involves buying an option with a higher premium and simultaneously selling an option with a lower premium, where the premium paid for the long
            option of the spread is more than the premium received from the written option. <br/><br/> Unlike a credit spread, a debit spread results in a premium debited, or
            paid, from the trader's or investor's account when the position is opened. Debit spreads are primarily used to offset the costs associated with owning long options
            positions. <br/><br/> For example, a trader buys one May put option with a strike price of $20 for $5 and simultaneously sells one May put option with a strike
            price of $10 for $1. Therefore, he paid $4, or $400 for the trade. If the trade is out of the money, his max loss is reduced to $400, as opposed to $500 if he only
            bought the put option.
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.CreditSpread">
            <summary>
            A credit spread involves selling, or writing, a high-premium option and simultaneously buying a lower premium option. The premium received from the written option
            is greater than the premium paid for the long option, resulting in a premium credited into the trader or investor's account when the position is opened. When
            traders or investors use a credit spread strategy, the maximum profit they receive is the net premium. The credit spread results in a profit when the options'
            spreads narrow. <br/><br/> For example, a trader implements a credit spread strategy by writing one March call option with a strike price of $30 for $3 and
            simultaneously buying one March call option at $40 for $1. Since the usual multiplier on an equity option is 100, the net premium received is $200 for the trade.
            Furthermore, the trader will profit if the spread strategy narrows. <br/><br/> A bearish trader expects stock prices to decrease, and, therefore, buys call options
            (long call) at a certain strike price and sells (short call) the same number of call options within the same class and with the same expiration at a lower strike
            price.In contrast, bullish traders expect stock prices to rise, and therefore, buy call options at a certain strike price and sell the same number of call options
            within the same class and with the same expiration at a higher strike price.
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.Straddle">
            <summary>
            A straddle is a neutral options strategy that involves simultaneously buying both a put option and a call option for the underlying security with the same strike
            price and the same expiration date. <br/><br/> A trader will profit from a long straddle when the price of the security rises or falls from the strike price by an
            amount more than the total cost of the premium paid. Profit potential is virtually unlimited, so long as the price of the underlying security moves very sharply.
            <br/><br/> Understanding Straddles <br/> More broadly, straddle strategies in finance refer to two separate transactions which both involve the same underlying
            security, with the two component transactions offsetting one another. Investors tend to employ a straddle when they anticipate a significant move in a stock's
            price but are unsure about whether the price will move up or down. A straddle can give a trader two significant clues about what the options market thinks about a
            stock. First is the volatility the market is expecting from the security. Second is the expected trading range of the stock by the expiration date. <br/><br/>
            Putting Together a Straddle <br/> To determine the cost of creating a straddle one must add the price of the put and the call together. For example, if a trader
            believes that a stock may rise or fall from its current price of $55 following earnings on March 1, they could create a straddle. The trader would look to purchase
            one put and one call at the $55 strike with an expiration date of March 15. To determine the cost of creating the straddle, the trader would add the price of one
            March 15 $55 call and one March 15 $55 put. If both the calls and the puts trade for $2.50 each, the total outlay or premium paid would be $5.00 for the two
            contracts. <br/><br/> The premium paid suggests that the stock would need to rise or fall by 9% from the $55 strike price to earn a profit by March 15. The amount
            the stock is expected to rise-or-fall is a measure of the future expected volatility of the stock. To determine how much the stock needs to rise or fall, divide
            the premium paid by the strike price, which is $5 / $55, or 9%. <br/><br/> Discovering the Predicted Trading Range <br/> Option prices imply a predicted trading
            range. To determine the expected trading range of a stock, one could add or subtract the price of the straddle to or from the price of the stock. In this case, the
            $5 premium could be added to $55 to predict a trading range of $50 to $60. If the stock traded within the zone of $50 to $60, the trader would lose some of their
            money but not necessarily all of it. At the time of expiration, it is only possible to earn a profit if the stock rises or falls outside of the $50 to $60 zone.
            <br/><br/> Earning a Profit <br/> If the stock fell to $48, the calls would be worth $0, while the puts would be worth $7 at expiration. That would deliver a
            profit of $2 to the trader. However, if the stock went to $57, the calls would be worth $2, and the puts would be worth zero, giving the trader a loss of $3. The
            worst-case scenario is when the stock price stays at or near the strike price. <br/><br/> Real World Example <br/> On Oct. 18, 2018, the options market was
            implying that AMD’s stock could rise or fall 20% from the $26 strike price for expiration on Nov. 16, because it cost $5.10 to buy one put and call. It placed the
            stock in a trading range of $20.90 to $31.15. A week later, the company reported results and shares plunged from $22.70 to $19.27 on Oct. 25.1﻿ In this case, the
            trader would have earned a profit because the stock fell outside of the range, exceeding the premium cost of buying the puts and calls. <br/>
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.Strangle">
             <summary>
             A strangle is an options strategy where the investor holds a position in both a call and a put option with different strike prices, but with the same expiration
             date and underlying asset. A strangle is a good strategy if you think the underlying security will experience a large price movement in the near future but are
             unsure of the direction. However, it is profitable mainly if the asset does swing sharply in price. <br/><br/>
            
             A strangle is similar to a straddle, but uses options at different strike prices, while a straddle uses a call and put at the same strike price. <br/><br/>
            
             Strangles come in two forms: <br/>
             1. In a long strangle the more common strategy the investor simultaneously buys an out-of-the-money call and an out-of-the-money put option. The call option's
             strike price is higher than the underlying asset's current market price, while the put has a strike price that is lower than the asset's market price. This
             strategy has large profit potential since the call option has theoretically unlimited upside if the underlying asset rises in price, while the put option can
             profit if the underlying asset falls. The risk on the trade is limited to the premium paid for the two options. <br/><br/>
            
             2. An investor doing a short strangle simultaneously sells an out-of-the-money put and an out-of-the-money call. This approach is a neutral strategy with limited
             profit potential. A short strangle profits when the price of the underlying stock trades in a narrow range between the break even points. The maximum profit is
             equivalent to the net premium received for writing the two options, less trading costs. <br/><br/>
            
             Real World Example of a Strangle <br/> Let's say that Starbucks(SBUX) is currently trading at US$50 per share. To employ the strangle option strategy, a trader
             enters into two option positions, one call and one put. The call has a strike of $52, and the premium is $3, for a total cost of $300 ($3 x 100 shares). The put
             option has a strike price of $48, and the premium is $2.85, for a total cost of $285 ($2.85 x 100 shares). Both options have the same expiration date. <br/><br/>
            
             If the price of the stock stays between $48 and $52 over the life of the option, the loss to the trader will be $585, which is the total cost of the two option
             contracts ($300 + $285). However, let's say Starbucks' stock experiences some volatility. If the price of the shares ends up at $40, the call option will expire
             worthlessly, and the loss will be $300 for that option. However, the put option has gained value and produces a profit of $715 ($1,000 less the initial option cost
             of $285) for that option. Therefore, the total gain to the trader is $415 ($715 profit - $300 loss). <br/><br/>
            
             If the price rises to $55, the put option expires worthless and incurs a loss of $285. The call option brings in a profit of $200 ($500 value - $300 cost). When
             the loss from the put option is factored in, the trade incurs a loss of $85 ($200 profit - $285) because the price move wasn't large enough to compensate for the
             cost of the options. The operative concept is the move being big enough. If Starbucks had risen $10 in price, to $60 per share, the total gain would have again
             been $415 ($1000 value - $300 for call option premium - $285 for an expired put option).
             </summary>
             <remarks>
             A Strangle vs. a Straddle <br/> Strangles and straddles are similar options strategies that allow investors to profit from large moves to the upside or downside.
             However, a long straddle involves simultaneously buying at the money call and put options where the strike price is identical to the underlying asset's market
             price rather than out-of-the-money options. A short straddle is similar to a short strangle, with limited profit potential that is equivalent to the premium
             collected from writing the at the money call and put options. <br/><br/> With the straddle, the investor profits when the price of the security rises or falls from
             the strike price just by an amount more than the total cost of the premium. So it doesn't require as large a price jump. Buying a strangle is generally less
             expensive than a straddle but it carries greater risk because the underlying asset needs to make a bigger move to generate a profit.
             </remarks>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.CondorSpread">
            <summary>
            A condor spread is a non-directional options strategy that limits both gains and losses while seeking to profit from either low or high volatility. There are two
            types of condor spreads. A long condor seeks to profit from low volatility and little to no movement in the underlying asset. A short condor seeks to profit from
            high volatility and a sizable move in the underlying asset in either direction. <br/><br/> Understanding Condor Spreads <br/> The purpose of a condor strategy is
            to reduce risk, but that comes with reduced profit potential and the costs associated with trading several options legs. Condor spreads are similar to butterfly
            spreads because they profit from the same conditions in the underlying asset. The major difference is the maximum profit zone, or sweet spot, for a condor is much
            wider than that for a butterfly, although the trade-off is a lower profit potential. Both strategies use four options, either all calls or all puts. <br/><br/> As
            a combination strategy, a condor involves multiple options, with identical expiration dates, purchased and/or sold at the same time. For example, a long condor
            using calls is the same as running both an in-the-money long call, or bull call spread, and an out-of-the-money short call, or bear call spread.Unlike a long
            butterfly spread, the two sub-strategies have four strike prices, instead of three.Maximum profit is achieved when the short call spread expires worthless, while
            the underlying asset closes at or above the higher strike price in the long call spread.
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.IronCondor">
            <summary>
            An iron condor is an options strategy created with four options consisting of two puts (one long and one short) and two calls (one long and one short), and four
            strike prices, all with the same expiration date. The goal is to profit from low volatility in the underlying asset. In other words, the iron condor earns the
            maximum profit when the underlying asset closes between the middle strike prices at expiration. <br/><br/> The iron condor has a similar payoff as a regular condor
            spread, but uses both calls and puts instead of only calls or only puts. Both the condor and the iron condor are extensions of the butterfly spread and iron
            butterfly, respectively. <br/><br/> Understanding the Iron Condor <br/> The strategy has limited upside and downside risk because the high and low strike options,
            the wings, protect against significant moves in either direction. Because of this limited risk, its profit potential is also limited. The commission can be a
            notable factor here, as there are four options involved. <br/><br/> For this strategy, the trader ideally would like all of the options to expire worthlessly,
            which is only possible if the underlying asset closes between the middle two strike prices at expiration. There will likely be a fee to close the trade if it is
            successful. If it is not successful, the loss is still limited.
            </summary>
            <remarks>
            The construction of the strategy is as follows: <br/>
            1. Buy one out of the money (OTM) put with a strike price below the current price of the underlying asset. The out of the money put option will protect against a
            significant downside move to the underlying asset. <br/><br/>
            2. Sell one OTM or at the money (ATM) put with a strike price closer to the current price of the underlying asset. <br/><br/>
            3. Sell one OTM or ATM call with a strike price above the current price of the underlying asset. <br/><br/>
            4. Buy one OTM call with a strike price further above the current price of the underlying asset. The out of the money call option will protect against a
            substantial upside move. <br/><br/> The options that are further out of the money, called the wings, are both long positions. Because both of these options are
            further out of the money, their premiums are lower than the two written options, so there is a net credit to the account when placing the trade. <br/><br/> By
            selecting different strike prices, it is possible to make the strategy lean bullish or bearish. For example, if both the middle strike prices are above the current
            price of the underlying asset, the trader hopes for a small rise in its price by expiration. It still has limited reward and limited risk.
            </remarks>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.ButterflySpread">
            <summary>
            A butterfly spread is an options strategy combining bull and bear spreads, with a fixed risk and capped profit. These spreads, involving either four calls or four
            puts are intended as a market-neutral strategy and pay off the most if the underlying does not move prior to option expiration. <br/><br/> Understanding
            Butterflies <br/> Butterfly spreads use four option contracts with the same expiration but three different strike prices. A higher strike price, an at-the-money
            strike price, and a lower strike price. The options with the higher and lower strike prices are the same distance from the at-the-money options. If the
            at-the-money options have a strike price of $60, the upper and lower options should have strike prices equal dollar amounts above and below $60. At $55 and $65,
            for example, as these strikes are both $5 away from $60. <br/><br/> Puts or calls can be used for a butterfly spread. Combining the options in various ways will
            create different types of butterfly spreads, each designed to either profit from volatility or low volatility.
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.IronButterfly">
            <summary>
            The iron butterfly spread is created by buying an out-of-the-money put option with a lower strike price, writing an at-the-money put option, writing an
            at-the-money call option, and buying an out-of-the-money call option with a higher strike price. The result is a trade with a net credit that's best suited for
            lower volatility scenarios. The maximum profit occurs if the underlying stays at the middle strike price. <br/><br/> The maximum profit is the premiums received.
            The maximum loss is the strike price of the bought call minus the strike price of the written call, less the premiums received.
            </summary>
        </member>
        <member name="F:LewisFam.Stocks.Models.Enums.OptionStrategy.ReverseIronButterfly">
            <summary>
            The reverse iron butterfly spread is created by writing an out-of-the-money put at a lower strike price, buying an at-the-money put, buying an at-the-money call,
            and writing an out-of-the-money call at a higher strike price. This creates a net debit trade that's best suited for high-volatility scenarios. Maximum profit
            occurs when the price of the underlying moves above or below the upper or lower strike prices. <br/><br/> The strategy's risk is limited to the premium paid to
            attain the position. The maximum profit is the strike price of the written call minus the strike of the bought call, less the premiums paid.
            </summary>
        </member>
        <member name="T:LewisFam.Stocks.Models.Stock">
            <summary>A stock class.</summary>
        </member>
        <member name="M:LewisFam.Stocks.Models.Stock.ToString">
            <inheritdoc/>
        </member>
        <member name="P:LewisFam.Stocks.Models.Stock.Symbol">
            <summary>
            Gets or sets the symbol.ToUpper()
            </summary>
        </member>
        <member name="T:LewisFam.Stocks.Options.Models.BlackScholes">
            <summary>Summary description for BlackSholes.</summary>
        </member>
        <member name="T:LewisFam.Stocks.Options.Models.Greeks">
            <inheritdoc cref="T:LewisFam.Stocks.Options.Models.IGreeks"/>
        </member>
        <member name="P:LewisFam.Stocks.Options.Models.Greeks.Delta">
            <inheritdoc />
        </member>
        <member name="P:LewisFam.Stocks.Options.Models.Greeks.Gamma">
            <inheritdoc />
        </member>
        <member name="P:LewisFam.Stocks.Options.Models.Greeks.Rho">
            <summary>
            Rho (p) represents the rate of change between an option's value and a 1% change in the interest rate. This measures sensitivity to the interest rate. For example,
            assume a call option has a rho of 0.05 and a price of $1.25. If interest rates rise by 1%, the value of the call option would increase to $1.30, all else being
            equal. The opposite is true for put options. Rho is greatest for at-the-money options with long times until expiration.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.Options.Models.Greeks.Theta">
            <summary>
            Theta (Θ) represents the rate of change between the option price and time, or time sensitivity - sometimes known as an option's time decay. Theta indicates the
            amount an option's price would decrease as the time to expiration decreases, all else equal. For example, assume an investor is long an option with a theta of
            -0.50. The option's price would decrease by 50 cents every day that passes, all else being equal.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.Options.Models.Greeks.Vega">
            <summary>
            Vega (v) represents the rate of change between an option's value and the underlying asset's implied volatility. This is the option's sensitivity to volatility.
            Vega indicates the amount an option's price changes given a 1% change in implied volatility. For example, an option with a Vega of 0.10 indicates the option's
            value is expected to change by 10 cents if the implied volatility changes by 1%.
            </summary>
        </member>
        <member name="T:LewisFam.Stocks.Options.Models.IGreeks">
            <remarks>
            "Greeks" is a term used in the options market to describe the different dimensions of risk involved in taking an options position. These variables are called Greeks
            because they are typically associated with Greek symbols. Each risk variable is a result of an imperfect assumption or relationship of the option with another
            underlying variable. Traders use different Greek values, such as delta, theta, and others, to assess options risk and manage option portfolios. <br/><br/> Greeks
            encompass many variables. These include delta, theta, gamma, vega, and rho, among others. Each one of these variables/Greeks has a number associated with it, and that
            number tells traders something about how the option moves or the risk associated with that option. The primary Greeks (Delta, Vega, Theta, Gamma, and Rho) are
            calculated each as a first partial derivative of the options pricing model (for instance, the Black-Scholes model). <br/><br/> The number or value associated with a
            Greek changes over time. Therefore, sophisticated options traders may calculate these values daily to assess any changes which may affect their positions or outlook,
            or to check if their portfolio needs to be rebalanced. Below are several of the main Greeks traders look at.
            </remarks>
        </member>
        <member name="P:LewisFam.Stocks.Options.Models.IGreeks.Delta">
            <summary>
            Delta (Δ) represents the rate of change between the option's price and a $1 change in the underlying asset's price. In other words, the price sensitivity of the
            option relative to the underlying. Delta of a call option has a range between zero and one, while the delta of a put option has a range between zero and negative
            one. For example, assume an investor is long a call option with a delta of 0.50. Therefore, if the underlying stock increases by $1, the option's price would
            theoretically increase by 50 cents.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.Options.Models.IGreeks.Gamma">
            <summary>
            Gamma (Γ) represents the rate of change between an option's delta and the underlying asset's price. This is called second-order (second-derivative) price
            sensitivity. Gamma indicates the amount the delta would change given a $1 move in the underlying security. For example, assume an investor is long one call option
            on hypothetical stock XYZ. The call option has a delta of 0.50 and a gamma of 0.10. Therefore, if stock XYZ increases or decreases by $1, the call option's delta
            would increase or decrease by 0.10.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.StocksUtil.StockList2021">
            <summary>Gets a sample stocks list.</summary>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.FindStockAsync(System.String)">
            <summary>Finds the stock async.</summary>
            <param name="symbol">The symbol.</param>
            <returns>A <see cref="T:LewisFam.Stocks.Models.Stock"/>.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetAllOptionsAsync(System.Int64)">
            <summary>Gets the all stock options.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>An IEnumerable of <see cref="T:LewisFam.Stocks.ThirdParty.Webull.Models.IRealTimeOptionQuote"/>.</returns>
            <exception cref="T:System.ApplicationException">Ignore.</exception>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetCnbcStockQuotesAsync(System.Collections.Generic.ICollection{System.String})">
            <summary>Gets the cnbc stock quotes async.</summary>
            <param name="symbols">The symbols.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetOptionChartDataAsync(System.Int64)">
            <summary>Gets the option chart data async.</summary>
            <param name="derivedId">The derived id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetOptionQuoteDetails(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>Gets the option quote details.</summary>
            <param name="derivedIds">The derived ids.</param>
            <param name="tickerId">  The ticker id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetOptionStratAsync(System.Int64)">
            <summary>Gets the option strat async.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeMarketQuoteAsync(System.String)">
            <summary>Gets the real time quote async.</summary>
            <param name="symbol">The symbol.</param>
            <returns>A IRealTimeStockQuote.</returns>
            <remarks>
            If possible, please use the <seealso cref="M:LewisFam.Stocks.StocksUtil.GetRealTimeMarketQuoteAsync(System.Int64)"/> method to reduce unnecessary http requests. This method finds the symbol id with an
            http request before calling the <seealso cref="M:LewisFam.Stocks.StocksUtil.GetRealTimeMarketQuoteAsync(System.Int64)"/> method.
            </remarks>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeMarketQuoteAsync(System.Int64)">
            <summary>Gets the real time quote async.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>A IRealTimeStockQuote.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeMarketQuotesAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <summary>Gets the real time quotes task.</summary>
            <param name="tickerIds">The ticker ids.</param>
            <param name="batchSize">The batch size.</param>
            <returns>A list of IRealTimeStockQuote.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeOptionQuoteAsync(System.Int64)">
            <summary>Gets the real time option quote async.</summary>
            <param name="derivedId">The derived id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeOptionQuotesAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>Gets the real time option quotes async.</summary>
            <param name="derivedIds">The derived ids.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetStockChartDataAsync(System.Int64,LewisFam.Stocks.ThirdParty.Webull.Models.ChartDataType,System.Int32)">
            <summary>Gets the stock chart data async.</summary>
            <param name="tickerId">The ticker id.</param>
            <param name="type">    The type.</param>
            <param name="count">   The count.</param>
            <returns>A list of <see cref="T:LewisFam.Stocks.ThirdParty.Webull.Models.IChartData"/>.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.SearchSymbolAsync(System.String)">
            <summary>Searches the symbol async.</summary>
            <param name="searchSymbol">The search symbol.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetAllOptionsAsync(LewisFam.Stocks.Models.Stock)">
            <summary>Gets the all stock options.</summary>
            <param name="stock">The stock.</param>
            <returns>An IEnumerable of <see cref="T:LewisFam.Stocks.ThirdParty.Webull.Models.IWebullOptionQuote"/>.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetFinancialsSimpleAsync(LewisFam.Stocks.Models.Stock)">
            <summary>Gets the financials simple async.</summary>
            <param name="stock">The stock.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetLastClosePrice(LewisFam.Stocks.Models.IStock)">
            <summary>Gets the last close price.</summary>
            <param name="stock">The stock.</param>
            <returns>A double.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetOptionChartDataAsync(LewisFam.Stocks.Options.Models.IOption)">
            <summary>Gets the option chart data async.</summary>
            <param name="optionQuote">The option quote.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetOptionsExpireOnListAsync(LewisFam.Stocks.Models.Stock)">
            <summary>Gets the expire on list async.</summary>
            <param name="stock">The stock.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetOptionStrategyListAsync(LewisFam.Stocks.Models.Stock)">
            <summary>Gets the option strategy list async.</summary>
            <param name="stock">The stock.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRandomElements``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Extension Method. Gets random elements of T.</summary>
            <param name="items">        The items.</param>
            <param name="elementsCount">The elements count.</param>
            <returns>A random list of T.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeMarketQuoteAsync(LewisFam.Stocks.Models.Stock)">
            <summary>Gets the real time market quote async.</summary>
            <param name="stock">The stock.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeMarketQuotesAsync(System.Collections.Generic.IEnumerable{LewisFam.Stocks.Models.Stock},System.Int32)">
            <summary>Gets the real time market quotes async.</summary>
            <param name="stocks">   The stocks.</param>
            <param name="batchSize">The batch size.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeOptionQuoteAsync(LewisFam.Stocks.Options.Models.IOption)">
            <summary>Gets the real time option quote async.</summary>
            <param name="optionQuote">The option quote.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetRealTimeOptionQuotesAsync(System.Collections.Generic.IEnumerable{LewisFam.Stocks.Options.Models.IOption})">
            <summary>Gets the real time option quotes async.</summary>
            <param name="optionQuotes">The option quotes.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.GetStockChartDataAsync(LewisFam.Stocks.Models.Stock,LewisFam.Stocks.ThirdParty.Webull.Models.ChartDataType,System.Int32)">
            <summary>Gets the stock chart data async.</summary>
            <param name="stock">The stock.</param>
            <param name="type"> The type.</param>
            <param name="count">The count.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.ToDerivedTickerIdList(System.Collections.Generic.IEnumerable{LewisFam.Stocks.Options.Models.IOption})">
            <summary>Extension method. IWebullOptionQuote to derivedTickerId list.</summary>
            <param name="optionQuotes"></param>
            <returns></returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.ToSymbolList(System.Collections.Generic.IEnumerable{LewisFam.Stocks.Models.Stock})">
            <summary>Extension method. Stocks to symbol list.</summary>
            <param name="webullStocks">The webull stocks.</param>
            <returns>A list of symbols.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.ToTickerIdList(System.Collections.Generic.IEnumerable{LewisFam.Stocks.Models.Stock})">
            <summary>Extension method. Stocks to tickerId list.</summary>
            <param name="webullStocks">The webull stocks.</param>
            <returns>A list of tickerIds.</returns>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.ReadFileAsync``1(System.String)">
            <summary>ReadFileAsync</summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:LewisFam.Stocks.StocksUtil.SaveToFile(LewisFam.Stocks.ThirdParty.Webull.Models.Watchlist,System.String,System.Boolean)">
            <summary>Writes the watchlist as json to file.</summary>
            <param name="watchlist">The watchlist.</param>
            <param name="path">     The path.</param>
            <param name="format">   If true, format.</param>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Cnbc.CnbcDataService">
            <summary>
            The cnbc data service.
            </summary>
            <summary>
            The cnbc data service.
            </summary>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Cnbc.CnbcDataService.GetRealTimeMarketQuoteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Cnbc.CnbcDataService.GetRealTimeMarketQuotesAsync(System.Collections.Generic.ICollection{System.String},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Cnbc.CnbcDataService.GetPriceBarsAsync(System.String,LewisFam.Well_Known.Enums.TimeUnit,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Cnbc.CnbcDataService.Helper">
            <summary>
            The cnbc data service helper class.
            </summary>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Cnbc.Models.PriceBar">
            <summary>
            
            </summary>
            <seealso cref="T:LewisFam.Stocks.ThirdParty.Cnbc.Models.MarketPrice" />
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding">
            <summary>
            The stock holding.
            </summary>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="symbol">The symbol.</param>
            <param name="shares">The shares.</param>
            <param name="price">The price.</param>
            <param name="averageCost">The average cost.</param>
            <param name="equity">The equity.</param>
        </member>
        <member name="P:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.Shares">
            <summary>
            Gets the shares.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.Price">
            <summary>
            Gets the price.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.AverageCost">
            <summary>
            Gets the average cost.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.TotalReturn">
            <summary>
            Gets the total return.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.TotalReturnPercentage">
            <summary>
            Gets the total return percentage.
            </summary>
        </member>
        <member name="P:LewisFam.Stocks.ThirdParty.Robinhood.Models.StockHolding.Equity">
            <summary>
            Gets the equity.
            </summary>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Robinhood.RobinhoodDataService">
            <summary>
            The Robinhood data service.
            </summary>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Robinhood.RobinhoodDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LewisFam.Stocks.ThirdParty.Robinhood.RobinhoodDataService"/> class.
            </summary>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Robinhood.RobinhoodDataService.ParseOptionHoldings(System.String)">
            <summary>Parses the option holdings.</summary>
            <param name="input">The input.</param>
            <returns>An ICollection.</returns>
            <remarks>ToDo: Convert to delegete</remarks>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Robinhood.RobinhoodDataService.ParseStockHoldings(System.String)">
            <summary>Parses the stock holdings.</summary>
            <param name="input">The input.</param>
            <returns>An ICollection.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.ICnbcDataService.GetRealTimeMarketQuoteAsync(System.String)">
            <summary>Get a realtime CNBC market quote async.</summary>
            <param name="symbol">The symbol.</param>
            <returns><see cref="T:LewisFam.Stocks.ThirdParty.Cnbc.Models.ICnbcRealTimeStockQuote"/></returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.ICnbcDataService.GetRealTimeMarketQuotesAsync(System.Collections.Generic.ICollection{System.String},System.Int32)">
            <summary>Gets realtime CNBC market quotes async.</summary>
            <param name="symbols">  The symbols.</param>
            <param name="batchSize">The batch size.</param>
            <returns><see cref="T:LewisFam.Stocks.ThirdParty.Cnbc.Models.ICnbcRealTimeStockQuote"/></returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.ICnbcDataService.GetPriceBarsAsync(System.String,LewisFam.Well_Known.Enums.TimeUnit,System.String,System.String)">
            <summary>Gets Price bars.</summary>
            <param name="symbol">       The symbol.</param>
            <param name="durationGroup">The duration group.</param>
            <param name="start">        The start.</param>
            <param name="end">          The end.</param>
            <returns><see cref="T:LewisFam.Stocks.ThirdParty.Cnbc.Models.PriceBar"/></returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.FindStockAsync(System.String)">
            <summary>Finds a stock async.</summary>
            <param name="symbol">The symbol.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.FindStockIdAsync(System.String)">
            <summary>Finds the stock id async.</summary>
            <param name="symbol">The symbol.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetAllOptionsAsync(System.Int64)">
            <summary>Gets the all options async.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetAllOptionsAsync(LewisFam.Stocks.Models.Stock)">
            <summary>Gets the all options async.</summary>
            <param name="stock">The stock.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetExpireOnListAsync(System.Int64)">
            <summary>Gets the expire on list async.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetOptionAsync(System.Int64)">
            <summary>Gets the option async.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetOptionAsync(System.String)">
            <summary>Gets the option async.</summary>
            <param name="symbol">The symbol.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetRealTimeMarketQuoteAsync(System.Int64)">
            <summary>Gets the real time market quote async.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetRealTimeMarketQuoteAsync(System.String)">
            <summary>Gets the real time market quote async.</summary>
            <param name="symbol">The symbol.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetRealTimeStockQuotesAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <summary>Gets the real time market quotes.</summary>
            <param name="tickerIds">The ticker ids.</param>
            <param name="batchSize">The batch size.</param>
            <returns>A list of IStockQuoteDataGrid.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetRealTimeStockQuotesAsync(System.Collections.Generic.IEnumerable{LewisFam.Stocks.Models.Stock},System.Int32)">
            <summary>Gets the real time market quotes async.</summary>
            <param name="stocks">   The stocks.</param>
            <param name="batchSize">The batch size.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetStockChartDataAsync(System.Int64,LewisFam.Stocks.ThirdParty.Webull.Models.ChartDataType,System.Int32)">
            <summary>Gets the stock chart data async.</summary>
            <param name="tickerId">The ticker id.</param>
            <param name="type">    The type.</param>
            <param name="count">   The max count.</param>
            <returns>A list of IChartData.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.GetStockChartDataAsync(LewisFam.Stocks.Models.Stock,LewisFam.Stocks.ThirdParty.Webull.Models.ChartDataType,System.Int32)">
            <summary>Gets the stock chart data async.</summary>
            <param name="stock"></param>
            <param name="type"> </param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Services.IWebullDataService.SearchSymbolAsync(System.String)">
            <summary>Searches the symbol async.</summary>
            <param name="symbolSearch">The symbol search.</param>
            <returns>A list of stocks.</returns>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Webull.Models.IWebullOptionQuote">
            <summary>
            The option.
            </summary>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.Models.Watchlist.GetMockWatchlist">
            <summary>
            Gets a sample mock watchlist.
            </summary>
            <returns>A Watchlist.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.Models.Watchlist.WriteToFile(LewisFam.Stocks.ThirdParty.Webull.Models.Watchlist,System.String,System.Boolean)">
            <summary>
            Writes the watchlist as json to file.
            </summary>
            <param name="watchlist">The watchlist.</param>
            <param name="path">The path.</param>
            <param name="format">If true, format.</param>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.Models.Watchlist.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Webull.Models.WebullOptionQuote">
            <summary>
            The option.
            </summary>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Webull.Models.WebullStockQuote">
            <summary>
            The webull stock quote.
            </summary>
        </member>
        <member name="T:LewisFam.Stocks.ThirdParty.Webull.WebullDataService">
            <summary>The webull data service.</summary>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.FindStockAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.FindStockIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetAllOptionsAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetAllOptionsAsync(LewisFam.Stocks.Models.Stock)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetExpireOnListAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetExpireOnListAsync(LewisFam.Stocks.Models.Stock)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetOptionAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetOptionAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetRealTimeMarketQuoteAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetRealTimeStockQuotesAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetRealTimeStockQuotesAsync(System.Collections.Generic.IEnumerable{LewisFam.Stocks.Models.Stock},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetStockChartDataAsync(LewisFam.Stocks.Models.Stock,LewisFam.Stocks.ThirdParty.Webull.Models.ChartDataType,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetStockChartDataAsync(System.Int64,LewisFam.Stocks.ThirdParty.Webull.Models.ChartDataType,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.SearchSymbolAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetOptionAsync(System.Int64,System.DateTimeOffset)">
            <summary>Gets the option async.</summary>
            <param name="tickerId">The ticker id.</param>
            <param name="expDate"> The exp date.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetOptionAsync(LewisFam.Stocks.Models.Stock,System.DateTimeOffset)">
            <summary>Gets the option async.</summary>
            <param name="stock">  The stock.</param>
            <param name="expDate">The exp date.</param>
            <returns>A Task.</returns>
        </member>
        <member name="F:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.Helper.BaseUri_Options">
            <summary>The base uri_ options.</summary>
        </member>
        <member name="F:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.Helper.BaseUri_Search">
            <summary>The base uri_ search.</summary>
        </member>
        <member name="F:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.Helper.Params_Options">
            <summary>The query params_ options.</summary>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.Helper.BuildUri(System.Int64,System.DateTimeOffset)">
            <summary>Builds the uri.</summary>
            <param name="tickerId">The ticker id.</param>
            <param name="expDate"> The exp date.</param>
            <returns>An Uri.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.Helper.BuildUriGetOptions(System.Int64)">
            <summary>Builds the uri.</summary>
            <param name="tickerId">The ticker id.</param>
            <returns>An Uri.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.Helper.BuildUriSearchSymbol(System.String)">
            <summary>Builds the uri.</summary>
            <param name="symbol">The symbol.</param>
            <returns>An Uri.</returns>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.WebullOptionStratRequestBody.#ctor(System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.WebullOptionStratRequestBody"/> class.</summary>
            <param name="tickerId">The ticker id.</param>
        </member>
        <member name="M:LewisFam.Stocks.ThirdParty.Webull.WebullDataService.GetOptionStrategyAsync(System.Int64)">
            <inheritdoc/>
        </member>
    </members>
</doc>
